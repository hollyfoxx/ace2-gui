{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Analysis Correlation Engine GUI \u00b6 If you're looking for the main ACE documentation, check out the ace2-core docs . Quick Start \u00b6 The ace2-gui repo comes with a docker-compose-dev.yml file you can use to quickly spin up a development environment of the ACE2 GUI system: bin/reset-dev-container.sh","title":"Analysis Correlation Engine GUI"},{"location":"#analysis-correlation-engine-gui","text":"If you're looking for the main ACE documentation, check out the ace2-core docs .","title":"Analysis Correlation Engine GUI"},{"location":"#quick-start","text":"The ace2-gui repo comes with a docker-compose-dev.yml file you can use to quickly spin up a development environment of the ACE2 GUI system: bin/reset-dev-container.sh","title":"Quick Start"},{"location":"development/","text":"ACE2 GUI Development Guide \u00b6 Backend (FastAPI) commands \u00b6 Run unit tests \u00b6 docker-compose run -e TESTING=1 backend pytest Frontend (Vue.js) commands \u00b6 Compile and minify for production \u00b6 docker-compose run frontend npm run build Run unit tests \u00b6 docker-compose run frontend npm run test:unit Run end-to-end tests \u00b6 docker-compose run frontend npm run test:e2e Lint and fix files \u00b6 docker-compose run frontend npm run lint Customize configuration \u00b6 See Configuration Reference .","title":"ACE2 GUI Development Guide"},{"location":"development/#ace2-gui-development-guide","text":"","title":"ACE2 GUI Development Guide"},{"location":"development/#backend-fastapi-commands","text":"","title":"Backend (FastAPI) commands"},{"location":"development/#run-unit-tests","text":"docker-compose run -e TESTING=1 backend pytest","title":"Run unit tests"},{"location":"development/#frontend-vuejs-commands","text":"","title":"Frontend (Vue.js) commands"},{"location":"development/#compile-and-minify-for-production","text":"docker-compose run frontend npm run build","title":"Compile and minify for production"},{"location":"development/#run-unit-tests_1","text":"docker-compose run frontend npm run test:unit","title":"Run unit tests"},{"location":"development/#run-end-to-end-tests","text":"docker-compose run frontend npm run test:e2e","title":"Run end-to-end tests"},{"location":"development/#lint-and-fix-files","text":"docker-compose run frontend npm run lint","title":"Lint and fix files"},{"location":"development/#customize-configuration","text":"See Configuration Reference .","title":"Customize configuration"},{"location":"development/backend/database/","text":"Database \u00b6 Schema definitions \u00b6 The database tables used by the FastAPI backend are all defined using SQLAlchemy. The table models are stored in backend/app/db/models.py . Alembic \u00b6 Creating revisions \u00b6 The models are applied to the database using Alembic . Whenever you make any changes to the database models, you will need to generate a new Alembic \"revision\". You can use the bin/db-revision.sh script to help create a new revision after you've made some changes to the database models: bin/db-revision.sh \"Some short note\" This script uses Alembic's \"autogenerate\" feature to create what it thinks is the correct database migration script for the changes you made. Autogenerate is not always perfect , so you should always verify the migration script it creates before committing it to the repo (and applying it in production) to make sure what will be applied to the database is correct. The migration scripts can be found in backend/db/migrations/versions/ . An example migration script for creating the \"tag\" database table is shown below: \"\"\"Initial revision Revision ID: 03fe4895893f Revises: Create Date: 2021-04-16 21:08:29.237142 \"\"\" from alembic import op import sqlalchemy as sa # revision identifiers, used by Alembic revision = '03fe4895893f' down_revision = None branch_labels = None depends_on = None def upgrade () -> None : # ### commands auto generated by Alembic - please adjust! ### op . create_table ( 'tag' , sa . Column ( 'id' , sa . Integer (), nullable = False ), sa . Column ( 'name' , sa . String (), nullable = True ), sa . PrimaryKeyConstraint ( 'id' ) ) op . create_index ( op . f ( 'ix_tag_id' ), 'tag' , [ 'id' ], unique = False ) # ### end Alembic commands ### def downgrade () -> None : # ### commands auto generated by Alembic - please adjust! ### op . drop_index ( op . f ( 'ix_tag_id' ), table_name = 'tag' ) op . drop_table ( 'tag' ) # ### end Alembic commands ### This script shows you what it will do when you issue the \"upgrade\" command to the database as well as if you need to revert and issue the \"downgrade\" command. You can manually edit this migration script if something is incorrect. Applying revisions \u00b6 Once you have a new revision you'd like to apply to the database, you can either use the bin/reset-dev-container.sh script to rebuild your entire development environment (which will automatically apply the Alembic database revisions), or you can use the bin/db-upgrade.sh script to apply the revisions without erasing and rebuilding the development environment.","title":"Database"},{"location":"development/backend/database/#database","text":"","title":"Database"},{"location":"development/backend/database/#schema-definitions","text":"The database tables used by the FastAPI backend are all defined using SQLAlchemy. The table models are stored in backend/app/db/models.py .","title":"Schema definitions"},{"location":"development/backend/database/#alembic","text":"","title":"Alembic"},{"location":"development/backend/database/#creating-revisions","text":"The models are applied to the database using Alembic . Whenever you make any changes to the database models, you will need to generate a new Alembic \"revision\". You can use the bin/db-revision.sh script to help create a new revision after you've made some changes to the database models: bin/db-revision.sh \"Some short note\" This script uses Alembic's \"autogenerate\" feature to create what it thinks is the correct database migration script for the changes you made. Autogenerate is not always perfect , so you should always verify the migration script it creates before committing it to the repo (and applying it in production) to make sure what will be applied to the database is correct. The migration scripts can be found in backend/db/migrations/versions/ . An example migration script for creating the \"tag\" database table is shown below: \"\"\"Initial revision Revision ID: 03fe4895893f Revises: Create Date: 2021-04-16 21:08:29.237142 \"\"\" from alembic import op import sqlalchemy as sa # revision identifiers, used by Alembic revision = '03fe4895893f' down_revision = None branch_labels = None depends_on = None def upgrade () -> None : # ### commands auto generated by Alembic - please adjust! ### op . create_table ( 'tag' , sa . Column ( 'id' , sa . Integer (), nullable = False ), sa . Column ( 'name' , sa . String (), nullable = True ), sa . PrimaryKeyConstraint ( 'id' ) ) op . create_index ( op . f ( 'ix_tag_id' ), 'tag' , [ 'id' ], unique = False ) # ### end Alembic commands ### def downgrade () -> None : # ### commands auto generated by Alembic - please adjust! ### op . drop_index ( op . f ( 'ix_tag_id' ), table_name = 'tag' ) op . drop_table ( 'tag' ) # ### end Alembic commands ### This script shows you what it will do when you issue the \"upgrade\" command to the database as well as if you need to revert and issue the \"downgrade\" command. You can manually edit this migration script if something is incorrect.","title":"Creating revisions"},{"location":"development/backend/database/#applying-revisions","text":"Once you have a new revision you'd like to apply to the database, you can either use the bin/reset-dev-container.sh script to rebuild your entire development environment (which will automatically apply the Alembic database revisions), or you can use the bin/db-upgrade.sh script to apply the revisions without erasing and rebuilding the development environment.","title":"Applying revisions"}]}